esphome:
  name: "catears"
  on_boot:
    - light.turn_on:
        id: leds
        brightness: 40%
        effect: Rainbow Pulse

# Define the used hardware.
esp8266:
  board: d1_mini

# Enable logging.
logger:

# Enable OTA updates.
ota:
  - platform: esphome
    password: ""

wifi:
  # Attempt to connect to this wifi.
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails.
  ap:
    ssid: "catears"
    password: !secret ap_password
    # Switch to access point mode early.
    ap_timeout: 5s

# Run webserver with dashboard to control cat ears.
web_server:
  # Allows accessing the webserver in ap mode at 192.168.4.1.
  local: true
  port: 80
  version: 3

# Setup the LEDs and effects.
light:
  - platform: neopixelbus
    id: leds
    type: GRB
    variant: WS2811
    pin: GPIO3
    num_leds: 25
    name: "NeoPixel Light"
    effects:
      - addressable_color_wipe:
          name: Random Color Wipe
      - addressable_rainbow:
          name: Rainbow Wipe
          speed: 40
          width: 10
      - addressable_scan:
          name: Scan Effect
          move_interval: 100ms
          scan_width: 3
      - addressable_fireworks:
          name: Fireworks Effect
          spark_probability: 30%
          use_random_color: true
      - addressable_lambda:
          name: Rainbow Pulse
          update_interval: 20ms
          lambda: |-
            static uint8_t h = 0;

            if (h > 365) {
              h = 0;
            }

            ESPHSVColor hsv_value(h, 255, 255);
            it.range(0, it.size()) = hsv_value.to_rgb();

            h = h+1;
      - addressable_lambda:
          name: Rainbow Wipe Improved
          update_interval: 25ms
          lambda: |-
            static uint16_t h = 0;

            if (h > 255) {
              h = 0;
            }

            uint16_t local_h = h;
            for (uint32_t i = 0; i < it.size(); i++) {
              ESPHSVColor hsv_value(local_h, 255, 255);
              it[i] = hsv_value.to_rgb();

              local_h = local_h + 2;
              if (local_h > 255) {
                local_h = 0;
              }
            }

            h = h+1;
      - addressable_lambda:
          name: Warning
          update_interval: 20ms
          lambda: |-
            const static uint16_t delta = 10;
            static uint32_t v = 0;

            if (v > 510) {
              v = 0;
            }

            uint32_t local_v = v;
            if (local_v > 255) {
              local_v = 510 - local_v;
            }

            local_v = (local_v*local_v) / 255;

            ESPHSVColor hsv_value(30, 255, local_v);
            it.range(0,delta) = hsv_value.to_rgb();
            it.range(delta,it.size()-delta) = Color(0,0,0);
            it.range(it.size()-delta,it.size()) = hsv_value.to_rgb();

            v = v+10;
      - addressable_lambda:
          name: Blitzer
          update_interval: 50ms
          lambda: |-
            const static uint16_t delta = 10;
            static uint16_t t = 0;

            if (t <= 5 || t == 8) {
              it.range(0,it.size()) = Color(0,0,0);
            } else {
              ESPHSVColor hsv_value(30, 255, 255);
              it.range(0,delta) = hsv_value.to_rgb();
              it.range(delta,it.size()-delta) = Color(0,0,0);
              it.range(it.size()-delta,it.size()) = hsv_value.to_rgb();
            }

            t = t+1;

            if (t > 10) {
              t = 0;
            }